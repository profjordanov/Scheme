1.
(define (f x) (cond ((null? x) ())
                    ((odd? (car x))(cons (car x)(f (cdr x))))
                    (else (f (cdr x)))))
(f '(1 2 3 4))


2.
(define (f x) (if(null? x) () (cons (expt (car x) 2)(f (cdr x)))))
(f '(1 2 3))

3.
(define (f x) (if(null? x) () (cons (* (car x) 2)(f (cdr x)))))
(f '(1 2 3))

(member <obekt> <sposuk>)
(set! <identifikator> <izraz> )
4.
(define x '(1 2 3 4))
(define (f y) (if (member y x) 'yes (set! x (cons y x))))
(f 5)

5.
(define (f x y) (cond ((and (null? x)(null? y)) 'yes )
                            ((or (null? x)(null? y)) 'no)
                            ((equal? (car x)(car y))(f (cdr x)(cdr y)))
                            (else 'no )))

6.
(define (f x) (cond ((< (length x) 2) 0)
                     ((< (* (car x)(cadr x)) 0)(+1 (f (cdr x))))
                     (else (f (cdr x)))))
(f '(5 6 -7 3 -2))

